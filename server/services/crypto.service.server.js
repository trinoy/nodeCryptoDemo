module.exports = function (app, model) {

    var g_promise = require('bluebird').Promise;
    var g_path = require('path');
    var g_date_time = require('node-datetime');

    // created promises for APIs using bluebird
    var g_fs = g_promise.promisifyAll(require('fs'));
    var g_node_forge = g_promise.promisifyAll(require('node-forge'));
    var g_mkdirpAsync = g_promise.promisify(require('mkdirp'));
    var g_node_forge_rsa = g_promise.promisifyAll(g_node_forge.rsa);
    var g_node_forge_pki = g_promise.promisifyAll(g_node_forge.pki);

    /*  Register the calllback functions for http request
     from the client.
     */
    app.get('/api/getPublicKey', getPublicKey);
    app.post('/api/saveEncryptedData', saveEncryptedData);

    /*  It will return the public key to the client by reading
     the pem file from the keystore asynchronously
     The public key is generated by the Node server when it
     starts for the first time and the key is stored as a pem
     file.
     */
    function getPublicKey(req, res) {
        var key_path = './server/keystore/key/pubkey.pem';
        return g_fs.readFileAsync(key_path, "ascii")
            .then(
                function (content) {
                    return res.send(content);
                },
                function (error) {
                    res.sendStatus(400).send(error);
                }
            );
    }

    /*  It will do the following
     1.  It will read the private key pem file
     store in the keystore
     2. It will then convert the pem file to the private key
     2.  It will then decrypt the encrypted data sent from the client
     using the private key
     3.  It will then log the data[encrypted and decrypted] and the current
     time in server log.
     */
    function saveEncryptedData(req, res) {
        var encrypted_data = req.body.encypted_data;
        var content;
        var key_path = './server/keystore/key/privkey.pem';
        return g_fs.readFileAsync(key_path, "ascii")
            .then(function (contentData) {
                content = contentData;
                return g_node_forge_pki.privateKeyFromPem(content);
            })
            .then(function (private_key) {
                var decrypted_data = private_key.decrypt(encrypted_data);
                console.log("encrypted data: " + content);
                console.log("decrypted data: " + decrypted_data);
                var dt = g_date_time.create();
                var data = {
                    time: dt.format('Y-m-d H:M:S'),
                    encrypted: content,
                    decrypted: decrypted_data
                };
                var log_path_name = "./server/logs";
                var log_file_name = g_path.join(log_path_name, 'server.log');
                return g_fs.appendFileAsync(log_file_name, JSON.stringify(data) + "\n", 'ascii');
            })
            .then(function () {
                return res.sendStatus(200);
            })
            .catch(function (exception) {
                console.log(exception);
                res.sendStatus(400).send(error);
            });
    }

    /*  It will do the following
     1.  It will read the private key from the pem file
     store in the keystore
     2.  It will then decrypt the encrypted data sent from the client
     using the private key
     3.  It will then log the data[encrypted and decrypted] and the current
     time in server log.
     */
    function generateKeyPair(pathname) {
        //var key_pair = g_node_forge.rsa.generateKeyPair({bits: 1024, e: 0x10001});
        return g_node_forge_rsa.generateKeyPairAsync({bits: 1024, workers: 2, e: 0x10001})
            .then(function (key_pair) {
                var private_pem = g_node_forge.pki.privateKeyToPem(key_pair.privateKey);
                var public_pem = g_node_forge.pki.publicKeyToPem(key_pair.publicKey);
                var private_key_file_name = g_path.join(pathname, 'private_key.pem');
                var public_key_file_name = g_path.join(pathname, 'public_key.pem');
                return g_mkdirpAsync(pathname)
                    .then(function () {
                        return g_promise.all([
                            g_fs.writeFileAsync(private_key_file_name, private_pem, 'ascii'),
                            g_fs.writeFileAsync(public_key_file_name, public_pem, 'ascii')
                        ]);
                    })
                    .then(function (keys_created) {
                        return keys_created;
                    })
                    .error(function (error) {
                        return error;
                    })
            })
            .catch(function (exception) {
                console.log("Error in generate key pair");
                throw exception;
            });
    }

    /*  It will do the following
     1.  It will generate the keys by calling generateKeyPair
     2.  It will create a log folder in server where server logs will be created
     */
    function init() {
        generateKeyPair('./server/keystore/key')
            .then(function (keys_created) {
                console.log('No of Keys stored in keystore is %d', keys_created.length);
                var path_name = "./server/logs";
                return g_mkdirpAsync(path_name)
                    .then(function (success) {
                        console.log("Log folder created successfully");
                    })
                    .error(function (error) {
                        console.log("Log folder creation failed");
                    })
            })
            .catch(function (exception) {
                console.log("Error in init");
            });
    }

    init();
};
